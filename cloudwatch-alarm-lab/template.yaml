AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudWatch Alarm Lab - Deploys two EC2 instances for alarm configuration (Final Solution)'

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
    ConstraintDescription: Must be a valid EC2 instance type.
  
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Latest Amazon Linux 2 AMI from SSM Parameter Store

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: CloudWatch-Alarm-Lab-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CloudWatch-Alarm-Lab-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: CloudWatch-Alarm-Lab-Public-Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: CloudWatch-Alarm-Lab-Public-RT

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref LatestAmiId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd php php-cli stress-ng
          
          # Create CPU load test page
          cat > /var/www/html/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>CPU Load Test</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 0; padding: 20px; line-height: 1.6; }
                  .container { max-width: 800px; margin: 0 auto; padding: 20px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
                  h1 { color: #333; }
                  button { background-color: #4CAF50; border: none; color: white; padding: 10px 20px; text-align: center; 
                          text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 4px; }
                  button.stop { background-color: #f44336; }
                  .status { margin-top: 20px; padding: 10px; border-radius: 4px; }
                  .running { background-color: #ffeb3b; }
                  .stopped { background-color: #e0e0e0; }
                  pre { background-color: #f5f5f5; padding: 10px; border-radius: 4px; overflow-x: auto; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>EC2 CPU Load Test - Instance 1</h1>
                  <p>Use the buttons below to start or stop a CPU load test. This will help trigger CloudWatch alarms.</p>
                  
                  <button id="startBtn" onclick="startLoad()">Start CPU Load (10 minutes)</button>
                  <button id="stopBtn" class="stop" onclick="stopLoad()" disabled>Stop CPU Load</button>
                  
                  <div id="status" class="status stopped">
                      Status: No CPU load test running
                  </div>
                  
                  <div id="response"></div>
                  
                  <script>
                      function startLoad() {
                          document.getElementById('startBtn').disabled = true;
                          document.getElementById('stopBtn').disabled = false;
                          document.getElementById('status').innerHTML = 'Status: Starting CPU load test...';
                          document.getElementById('status').className = 'status running';
                          
                          fetch('/direct-stress.php')
                              .then(response => response.text())
                              .then(data => {
                                  document.getElementById('response').innerHTML = data;
                              });
                      }
                      
                      function stopLoad() {
                          document.getElementById('startBtn').disabled = false;
                          document.getElementById('stopBtn').disabled = true;
                          document.getElementById('status').innerHTML = 'Status: Stopping CPU load test...';
                          document.getElementById('status').className = 'status stopped';
                          
                          fetch('/stop-stress.php')
                              .then(response => response.text())
                              .then(data => {
                                  document.getElementById('response').innerHTML = data;
                              });
                      }
                  </script>
              </div>
          </body>
          </html>
          EOF
          
          # Create direct stress PHP script
          cat > /var/www/html/direct-stress.php << 'EOF'
          <?php
          error_reporting(E_ALL);
          ini_set('display_errors', 1);
          
          // Clean up any existing stress processes
          shell_exec('pkill -f stress-ng 2>/dev/null');
          shell_exec('pkill -f stress 2>/dev/null');
          sleep(1);
          
          // Check if stress-ng is installed
          $stress_check = shell_exec('which stress-ng 2>&1');
          echo "<h3>Environment Check</h3>";
          echo "stress-ng path: " . ($stress_check ? $stress_check : "Not found") . "<br>";
          
          // Try different CPU stress tools
          $methods = [
              // Method 1: stress-ng using yes method (usually works well)
              "stress-ng --cpu $(nproc) --cpu-method yes --timeout 600s > /tmp/stress.log 2>&1 & echo $!",
              
              // Method 2: Use native yes command (available on almost all systems)
              "for i in $(seq 1 $(nproc)); do yes > /dev/null & done; echo $!",
              
              // Method 3: Use dd command to generate CPU load
              "for i in $(seq 1 $(nproc)); do dd if=/dev/zero of=/dev/null & done; echo $!"
          ];
          
          // Try the first method
          echo "<h3>Starting CPU Load Test</h3>";
          echo "Trying Method 1: stress-ng with yes method<br>";
          $pid = trim(shell_exec($methods[0]));
          echo "Process ID: $pid<br>";
          
          // Save PID to file
          file_put_contents('/tmp/cpu_load_pid', $pid);
          chmod('/tmp/cpu_load_pid', 0666);
          
          // Wait for process to start
          sleep(2);
          
          // Check if process is running
          $ps_output = shell_exec("ps -p $pid");
          if (strpos($ps_output, $pid) !== false) {
              echo "<div style='color:green; font-weight:bold;'>✓ Method 1 started successfully</div>";
          } else {
              echo "<div style='color:red;'>✗ Method 1 failed to start</div>";
              
              // 尝试方法2
              echo "Trying Method 2: Multiple yes processes<br>";
              shell_exec($methods[1]);
              echo "<div style='color:blue;'>Started yes processes</div>";
              
              // Save a marker file indicating method 2 was used
              file_put_contents('/tmp/using_method2', '1');
          }
          
          // Show current processes
          echo "<h3>Currently Running Processes</h3>";
          echo "<pre>";
          echo shell_exec("ps aux | grep -E 'stress|yes|dd' | grep -v grep");
          echo "</pre>";
          
          // Show current CPU load
          $load = sys_getloadavg();
          echo "<h3>Current System Load</h3>";
          echo "1-minute average load: <strong>" . $load[0] . "</strong><br>";
          echo "5-minute average load: <strong>" . $load[1] . "</strong><br>";
          echo "15-minute average load: <strong>" . $load[2] . "</strong><br>";
          
          // Show CPU usage
          echo "<h3>CPU Usage</h3>";
          $cpu_usage = shell_exec("top -bn1 | grep 'Cpu(s)' | awk '{print $2 + $4}'");
          echo "CPU usage: <strong>" . trim($cpu_usage) . "%</strong><br>";
          
          echo "<h3>Test Results</h3>";
          echo "<div id='result' style='padding: 10px; background-color: #f0f0f0; border-left: 4px solid #4CAF50;'>";
          echo "CPU load test has started. Please wait 1-2 minutes before checking CloudWatch metrics.<br>";
          echo "If you see the system load starting to increase, the test is working.<br>";
          echo "</div>";
          
          // Add auto-refresh
          echo "<script>
          setTimeout(function() {
              location.reload();
          }, 30000); // Auto-refresh after 30 seconds
          </script>";
          
          echo "<p>页面将在Auto-refresh after 30 seconds以显示最新状态</p>";
          ?>
          EOF
          
          # Create stop stress PHP script
          cat > /var/www/html/stop-stress.php << 'EOF'
          <?php
          error_reporting(E_ALL);
          ini_set('display_errors', 1);
          
          echo "<h3>Stopping CPU Load Test</h3>";
          
          // Stop all possible CPU load processes
          shell_exec('pkill -f stress-ng 2>/dev/null');
          shell_exec('pkill -f "yes > /dev/null" 2>/dev/null');
          shell_exec('pkill -f "dd if=/dev/zero" 2>/dev/null');
          
          // Check if there is a PID file
          if (file_exists('/tmp/cpu_load_pid')) {
              $pid = file_get_contents('/tmp/cpu_load_pid');
              shell_exec("kill -9 $pid 2>/dev/null");
              unlink('/tmp/cpu_load_pid');
              echo "已终止Process ID: $pid<br>";
          }
          
          // Check if method 2 was used
          if (file_exists('/tmp/using_method2')) {
              unlink('/tmp/using_method2');
              echo "Terminated all yes processes<br>";
          }
          
          // Show current processes
          echo "<h3>Currently Running Processes</h3>";
          echo "<pre>";
          echo shell_exec("ps aux | grep -E 'stress|yes|dd' | grep -v grep");
          echo "</pre>";
          
          // Show current CPU load
          $load = sys_getloadavg();
          echo "<h3>Current System Load</h3>";
          echo "1-minute average load: <strong>" . $load[0] . "</strong><br>";
          echo "5-minute average load: <strong>" . $load[1] . "</strong><br>";
          echo "15-minute average load: <strong>" . $load[2] . "</strong><br>";
          
          // Show CPU usage
          echo "<h3>CPU Usage</h3>";
          $cpu_usage = shell_exec("top -bn1 | grep 'Cpu(s)' | awk '{print $2 + $4}'");
          echo "CPU usage: <strong>" . trim($cpu_usage) . "%</strong><br>";
          
          echo "<h3>Test Results</h3>";
          echo "<div id='result' style='padding: 10px; background-color: #f0f0f0; border-left: 4px solid #f44336;'>";
          echo "CPU load test has been stopped.<br>";
          echo "System load should return to normal within a few minutes.<br>";
          echo "</div>";
          ?>
          EOF
          
          # Set proper permissions
          chmod 755 /var/www/html/*.php
          chmod 777 /tmp
          
          # Start Apache
          systemctl start httpd
          systemctl enable httpd
      Tags:
        - Key: Name
          Value: CloudWatch-Alarm-Lab-Instance-1

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref LatestAmiId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd php php-cli stress-ng
          
          # Create CPU load test page
          cat > /var/www/html/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>CPU Load Test</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 0; padding: 20px; line-height: 1.6; }
                  .container { max-width: 800px; margin: 0 auto; padding: 20px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
                  h1 { color: #333; }
                  button { background-color: #4CAF50; border: none; color: white; padding: 10px 20px; text-align: center; 
                          text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 4px; }
                  button.stop { background-color: #f44336; }
                  .status { margin-top: 20px; padding: 10px; border-radius: 4px; }
                  .running { background-color: #ffeb3b; }
                  .stopped { background-color: #e0e0e0; }
                  pre { background-color: #f5f5f5; padding: 10px; border-radius: 4px; overflow-x: auto; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>EC2 CPU Load Test - Instance 2</h1>
                  <p>Use the buttons below to start or stop a CPU load test. This will help trigger CloudWatch alarms.</p>
                  
                  <button id="startBtn" onclick="startLoad()">Start CPU Load (10 minutes)</button>
                  <button id="stopBtn" class="stop" onclick="stopLoad()" disabled>Stop CPU Load</button>
                  
                  <div id="status" class="status stopped">
                      Status: No CPU load test running
                  </div>
                  
                  <div id="response"></div>
                  
                  <script>
                      function startLoad() {
                          document.getElementById('startBtn').disabled = true;
                          document.getElementById('stopBtn').disabled = false;
                          document.getElementById('status').innerHTML = 'Status: Starting CPU load test...';
                          document.getElementById('status').className = 'status running';
                          
                          fetch('/direct-stress.php')
                              .then(response => response.text())
                              .then(data => {
                                  document.getElementById('response').innerHTML = data;
                              });
                      }
                      
                      function stopLoad() {
                          document.getElementById('startBtn').disabled = false;
                          document.getElementById('stopBtn').disabled = true;
                          document.getElementById('status').innerHTML = 'Status: Stopping CPU load test...';
                          document.getElementById('status').className = 'status stopped';
                          
                          fetch('/stop-stress.php')
                              .then(response => response.text())
                              .then(data => {
                                  document.getElementById('response').innerHTML = data;
                              });
                      }
                  </script>
              </div>
          </body>
          </html>
          EOF
          
          # Create direct stress PHP script
          cat > /var/www/html/direct-stress.php << 'EOF'
          <?php
          error_reporting(E_ALL);
          ini_set('display_errors', 1);
          
          // Clean up any existing stress processes
          shell_exec('pkill -f stress-ng 2>/dev/null');
          shell_exec('pkill -f stress 2>/dev/null');
          sleep(1);
          
          // Check if stress-ng is installed
          $stress_check = shell_exec('which stress-ng 2>&1');
          echo "<h3>Environment Check</h3>";
          echo "stress-ng path: " . ($stress_check ? $stress_check : "Not found") . "<br>";
          
          // Try different CPU stress tools
          $methods = [
              // Method 1: stress-ng using yes method (usually works well)
              "stress-ng --cpu $(nproc) --cpu-method yes --timeout 600s > /tmp/stress.log 2>&1 & echo $!",
              
              // Method 2: Use native yes command (available on almost all systems)
              "for i in $(seq 1 $(nproc)); do yes > /dev/null & done; echo $!",
              
              // Method 3: Use dd command to generate CPU load
              "for i in $(seq 1 $(nproc)); do dd if=/dev/zero of=/dev/null & done; echo $!"
          ];
          
          // Try the first method
          echo "<h3>Starting CPU Load Test</h3>";
          echo "Trying Method 1: stress-ng with yes method<br>";
          $pid = trim(shell_exec($methods[0]));
          echo "Process ID: $pid<br>";
          
          // Save PID to file
          file_put_contents('/tmp/cpu_load_pid', $pid);
          chmod('/tmp/cpu_load_pid', 0666);
          
          // Wait for process to start
          sleep(2);
          
          // Check if process is running
          $ps_output = shell_exec("ps -p $pid");
          if (strpos($ps_output, $pid) !== false) {
              echo "<div style='color:green; font-weight:bold;'>✓ Method 1 started successfully</div>";
          } else {
              echo "<div style='color:red;'>✗ Method 1 failed to start</div>";
              
              // 尝试方法2
              echo "Trying Method 2: Multiple yes processes<br>";
              shell_exec($methods[1]);
              echo "<div style='color:blue;'>Started yes processes</div>";
              
              // Save a marker file indicating method 2 was used
              file_put_contents('/tmp/using_method2', '1');
          }
          
          // Show current processes
          echo "<h3>Currently Running Processes</h3>";
          echo "<pre>";
          echo shell_exec("ps aux | grep -E 'stress|yes|dd' | grep -v grep");
          echo "</pre>";
          
          // Show current CPU load
          $load = sys_getloadavg();
          echo "<h3>Current System Load</h3>";
          echo "1-minute average load: <strong>" . $load[0] . "</strong><br>";
          echo "5-minute average load: <strong>" . $load[1] . "</strong><br>";
          echo "15-minute average load: <strong>" . $load[2] . "</strong><br>";
          
          // Show CPU usage
          echo "<h3>CPU Usage</h3>";
          $cpu_usage = shell_exec("top -bn1 | grep 'Cpu(s)' | awk '{print $2 + $4}'");
          echo "CPU usage: <strong>" . trim($cpu_usage) . "%</strong><br>";
          
          echo "<h3>Test Results</h3>";
          echo "<div id='result' style='padding: 10px; background-color: #f0f0f0; border-left: 4px solid #4CAF50;'>";
          echo "CPU load test has started. Please wait 1-2 minutes before checking CloudWatch metrics.<br>";
          echo "If you see the system load starting to increase, the test is working.<br>";
          echo "</div>";
          
          // Add auto-refresh
          echo "<script>
          setTimeout(function() {
              location.reload();
          }, 30000); // Auto-refresh after 30 seconds
          </script>";
          
          echo "<p>页面将在Auto-refresh after 30 seconds以显示最新状态</p>";
          ?>
          EOF
          
          # Create stop stress PHP script
          cat > /var/www/html/stop-stress.php << 'EOF'
          <?php
          error_reporting(E_ALL);
          ini_set('display_errors', 1);
          
          echo "<h3>Stopping CPU Load Test</h3>";
          
          // Stop all possible CPU load processes
          shell_exec('pkill -f stress-ng 2>/dev/null');
          shell_exec('pkill -f "yes > /dev/null" 2>/dev/null');
          shell_exec('pkill -f "dd if=/dev/zero" 2>/dev/null');
          
          // Check if there is a PID file
          if (file_exists('/tmp/cpu_load_pid')) {
              $pid = file_get_contents('/tmp/cpu_load_pid');
              shell_exec("kill -9 $pid 2>/dev/null");
              unlink('/tmp/cpu_load_pid');
              echo "已终止Process ID: $pid<br>";
          }
          
          // Check if method 2 was used
          if (file_exists('/tmp/using_method2')) {
              unlink('/tmp/using_method2');
              echo "Terminated all yes processes<br>";
          }
          
          // Show current processes
          echo "<h3>Currently Running Processes</h3>";
          echo "<pre>";
          echo shell_exec("ps aux | grep -E 'stress|yes|dd' | grep -v grep");
          echo "</pre>";
          
          // Show current CPU load
          $load = sys_getloadavg();
          echo "<h3>Current System Load</h3>";
          echo "1-minute average load: <strong>" . $load[0] . "</strong><br>";
          echo "5-minute average load: <strong>" . $load[1] . "</strong><br>";
          echo "15-minute average load: <strong>" . $load[2] . "</strong><br>";
          
          // Show CPU usage
          echo "<h3>CPU Usage</h3>";
          $cpu_usage = shell_exec("top -bn1 | grep 'Cpu(s)' | awk '{print $2 + $4}'");
          echo "CPU usage: <strong>" . trim($cpu_usage) . "%</strong><br>";
          
          echo "<h3>Test Results</h3>";
          echo "<div id='result' style='padding: 10px; background-color: #f0f0f0; border-left: 4px solid #f44336;'>";
          echo "CPU load test has been stopped.<br>";
          echo "System load should return to normal within a few minutes.<br>";
          echo "</div>";
          ?>
          EOF
          
          # Set proper permissions
          chmod 755 /var/www/html/*.php
          chmod 777 /tmp
          
          # Start Apache
          systemctl start httpd
          systemctl enable httpd
      Tags:
        - Key: Name
          Value: CloudWatch-Alarm-Lab-Instance-2

Outputs:
  Instance1Id:
    Description: ID of the first EC2 instance
    Value: !Ref EC2Instance1
    Export:
      Name: !Sub "${AWS::StackName}-Instance1Id"

  Instance2Id:
    Description: ID of the second EC2 instance
    Value: !Ref EC2Instance2
    Export:
      Name: !Sub "${AWS::StackName}-Instance2Id"

  Instance1URL:
    Description: URL for the first EC2 instance CPU load test page
    Value: !Sub "http://${EC2Instance1.PublicDnsName}"
    Export:
      Name: !Sub "${AWS::StackName}-Instance1URL"

  Instance2URL:
    Description: URL for the second EC2 instance CPU load test page
    Value: !Sub "http://${EC2Instance2.PublicDnsName}"
    Export:
      Name: !Sub "${AWS::StackName}-Instance2URL"

  VPCId:
    Description: ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"
